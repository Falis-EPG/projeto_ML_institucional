# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_hVAbwXvSMrM5SKlEKL-vAxW4-iJG92r
"""

!pip install pandas==2.2.2 scikit-learn==1.5.2 tensorflow==2.17.0 matplotlib seaborn

url = 'https://raw.githubusercontent.com/Mirlaa/Live-coding-alura-keras/refs/heads/main/autenticacao_notas.csv'
url_novos = 'https://raw.githubusercontent.com/Mirlaa/Live-coding-alura-keras/refs/heads/main/novas_notas.csv'

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf

df = pd.read_csv(url)
df

df.Classe.unique()

X = df.drop('Classe', axis=1).values
y = df.Classe.values

X_treino, X_teste, y_treino, y_teste = train_test_split(X,y,test_size=0.2, random_state=42)

scaler = StandardScaler()
X_treino = scaler.fit_transform(X_treino)
X_teste = scaler.transform(X_teste)

plt.figure(figsize=(8,6))
sns.scatterplot(x=df['VariÃ¢ncia'], y=df['Assimetria'], hue=df['Classe'])
plt.legend(title='Classe')
plt.show

modelo = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(X_treino.shape[1], )),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

modelo.summary()

modelo.compile(optimizer='adam',
               loss='binary_crossentropy',
               metrics=['accuracy'])

historico = modelo.fit(X_treino, y_treino, epochs=60, validation_split=0.2)

modelo.evaluate(X_teste, y_teste)

pd.DataFrame(historico.history).plot
plt.grid()
plt.show()

novos_dados = pd.read_csv(url_novos)
novos_dados

dados_normalizados = scaler.transform(novos_dados)
dados_normalizados

previsao = modelo.predict(dados_normalizados)
previsao

novos_dados['Classe'] = (previsao>=0.5).astype(int)

novos_dados

